<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2015-05-01T15:07:39-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How we Open Source'd Eigen]]></title>
    <link href="http://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/"/>
    <updated>2015-04-28T00:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen</id>
    <content type="html"><![CDATA[<p>It was 95 days ago, and I was sitting before of my computer in NYC. I loaded my terminal, opened <a href="https://taptalk.me">TapTalk</a> on my phone, tapped on my collegue <a href="http://ashfurrow.com">Ash's</a> avatar and held my finger there. I paused, this moment was a long time, it was worth waiting. I switched the camera from my face to the screen with the terminal open.</p>

<p>This moment was probably the most nervous I had been in years. It showed <code>git push origin master</code>. I said "it's happening." I hit return. A new era in the Artsy mobile team had started. A few minutes later, I wrote this tweet:</p>

<center>
<blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p>We have open source‚Äôd the <a href="https://twitter.com/artsy">@Artsy</a> iOS app.&#10;&#10;<a href="https://t.co/c1SWtHmUgy">https://t.co/c1SWtHmUgy</a>&#10;&#10;üéâ</p>&mdash; √òrta (@orta) <a href="https://twitter.com/orta/status/558395611754819586">January 22, 2015</a></blockquote>
</center>


<p>Let's go over the process we went through to get to that point.</p>

<!-- more -->


<p>Credit where credit is due, when we were <a href="/blog/2014/11/13/eidolon-retrospective/">working on Eidolon</a>, our CTO <a href="http://code.dblock.org/">dB</a> just casually tossed the idea that, really, Eigen should be open source too. Eigen is the code name for the <a href="http://iphone.artsy.net/">Artsy iOS app</a>. This totally threw me for a loop, we were only just getting to a point where we could build an app from scratch in the open. Trying to get a project that had existed for years and had its own momentum converted would take a lot of thinking about.</p>

<p>We devoted time at the end of 2014 to understand what the constraints were for getting the app opened. From a purely functional perspective we would have to start with a <a href="https://github.com/artsy/mobile/issues/11">drastic decision</a> around the repo itself.</p>

<h3>The Repo</h3>

<p><img src="/images/2015-04-28-open-sourcing-your-apps/rise-and-fall.png" alt="Rise And Fall" /></p>

<p>We opted to go for a total repo switch, removing all history. There were a lot of places where keys could have been hiding within the app. To get this done we migrated the existing <code>eigen</code> to <code>eigen-private</code> on github, and did a fresh <code>git init</code>. People who have joined Artsy Mobile post-OSS have never even cloned the <code>eigen-private</code> repo. So I feel good about this call.</p>

<p>We used the last few moments of the private repo to remove all of the default Apple copyright notices. We didn't feel they added anything on top of the git history, and made it feel like the founders of a project were more important than anyone working on improvements.</p>

<p>It wasn't all smooth sailing with respect to the repo switch however. As the switch happened the WatchKit came out, and we had devoted quite a lot of time to building an app in it. Given that you <a href="http://www.elischiff.com/blog/2015/3/24/fear-of-apple">can't predict Apple</a>'s reactions, and you couldn't ship an app with an embedded watch app to the store, we opted to work on a branch from our private repo. <a href="https://github.com/artsy/eigen/pull/302">For months</a>. In the end it was easier to have the two folders next to each other, then copy &amp; paste over all the files and to set all the settings in the Xcode project again.</p>

<p>One of the things that we found a bit sad about the transition to a new repo, is that it's hard to give past contributors recognition for their work. One of the ways we've worked around this is by having a file <a href="https://github.com/artsy/eigen/pull/409">documenting past contributors</a> in our repo.</p>

<h3>Docs</h3>

<p>We had to significantly update our README, and a lot of the process around bootstrapping. We wanted to reduce the friction to actually trying the app as much as possible. It's easy to look at the source on github but to be able to get it up and running quickly should be a really high priority. So our README is based on getting it up and running as an OSS project, not for someone internal who may push betas/releases.</p>

<p>When we opened the repo, there <a href="https://github.com/artsy/eigen/pulls?q=is%3Apr+is%3Aclosed+sort%3Acreated-asc">were a lot</a> of documentation fix PRs - thanks <em>segiddins</em>, <em>neonichu</em> and <em>dkhamsing</em>. They have low barriers to entry, and fun to make for people looking through big projects. We still get them pretty regularly.</p>

<h3>Secrets</h3>

<p>There aren't large sections of the our app that we are keeping secret, though we have discussed ways in which we could. There is however a nice solution to having something different for OSS vs your internal team, API compatible CocoaPods. We <a href="/blog/2014/06/20/artsys-first-closed-source-pod/">do this</a> for our fonts in all apps. We've talked extensively about our <a href="/blog/2015/01/21/cocoapods-keys-and-CI/">tools for keeping</a> API keys secret, so no need to go over that twice.</p>

<p>Other than that we had already been opening any good abstractions as CocoaPods for anyone to use. All our dependencies were packaged outside of the app, we had no crazy internal SDKs or anything worth hiding within the codebase.</p>

<h3>Selling the idea</h3>

<p>It's one thing to think that it's possible, it's another to do it. I'm glad that I am in a position where I can enact change. I felt no resistence in the process. I kept offering potential avenues for someone to stop me, too. I emailed the entire team as I started the process 2 weeks before it happened, I talked to anyone who might write issues or contribute from the design team. As I got further along the process and sent another email out that it was going to happen tomorrow. All I got were üëç and üéâs in <a href="https://itunes.apple.com/us/app/gifs/id961850017?l=en&amp;mt=12">GIF</a> form. So I kept moving forwards till that tweet above.</p>

<p>From our dev team's perspective, this is not a brave new world. Our website, <a href="https://github.com/artsy/force-public">force</a>, is open source. Though they operate under different constraints.</p>

<p>From the perspective of Artsy, even though opening our code aligns very strongly with our <a href="/blog/2015/03/31/the-culture-of-openness-artsy-mobile/">values of openness</a>, we are still a company. Opening up our codebase lets our competitors see what we're up to in advance, and <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">closed source</a> is still the norm for apps. Opening our code and process is also opening ourselves to criticism.</p>

<h3>Evolution of the team</h3>

<p>3 months on the way we operate has changed. We're a lot more organized, and the Eigen repo is easily the most well run project on the mobile team. It has <a href="https://github.com/artsy/eigen/milestones">active milestones</a>, that represent long term goals and the current sprint. We discuss a lot of the interesting cultural choices publicly on <a href="https://github.com/artsy/eigen/issues/221">issues</a> and in our <a href="https://github.com/artsy/mobile/issues">mobile team repo</a>. Having this app in the open, and the experience of doing so has also improved our workflow on other apps. Eidolon for example now runs with a similar structure.</p>

<p><img src="/images/2015-04-28-open-sourcing-your-apps/sprint-planning-issue.png" alt="Sprint Planning Issue" /></p>

<p>We found that people would use our issue structure to <a href="https://github.com/artsy/eigen/issues/324">ask</a> <a href="https://github.com/artsy/eigen/issues/313">questions</a> about Eigen itself. This was an unexpected positive outcome. It gave us a chance to re-think decisions and try to understand how we came to certain decisions that might not be documented anywhere.</p>

<p>Our culture improved by open sourcing our app. As individuals, it's great to know that our work goes towards helping the larger community and all engineers love having a green profile.</p>

<center>
<img src="http://artsy.github.io/images/2015-04-28-open-sourcing-your-apps/staying-green.png" alt="Staying Green">
</center>


<p>If you've not explored the idea of open sourcing your app, you should. We're happy to help out - <a href="https://github.com/artsy/mobile/issues/new">create an issue</a>. Or contact me personally, my email is on my <a href="https://github.com/orta">github profile</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Culture of Openness in the Artsy Mobile Team]]></title>
    <link href="http://artsy.github.io/blog/2015/03/31/the-culture-of-openness-artsy-mobile/"/>
    <updated>2015-03-31T19:07:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/03/31/the-culture-of-openness-artsy-mobile</id>
    <content type="html"><![CDATA[<p>Recently, the Artsy Mobile team had the pleasure of working together on <a href="http://www.objc.io/issue-22/artsy.html">an article</a> for <a href="http://www.objc.io">objc.io</a>, an online publication dedicated to in-depth articles about iOS and OS X development. Each monthly issue consists of several articles centered around a theme‚Äîpast issues include <a href="http://www.objc.io/issue-15/">Testing</a>, <a href="http://www.objc.io/issue-12/">Animations</a> and <a href="http://www.objc.io/issue-16/">Swift</a>. objc.io‚Äôs latest issue, <a href="http://www.objc.io/issue-22">iOS at Scale</a>, features articles by a handful of developers about how they approach iOS development at their respective companies. Our contribution to the issue is a collaboratively-written article by and about Artsy‚Äôs Mobile team from the angle of Artsy's focus on the core value of openness that is foundational to how we (and the greater Artsy team) work.</p>

<p>As our article puts it:</p>

<blockquote><p>Our team intrinsically believes in the ideas of open source. Though our individual motivations vary ‚Äî from a conviction in the power of education to a determination to help others see from giants‚Äô shoulders ‚Äî we all maintain the value of open source.</p></blockquote>

<p>iOS at Artsy is characterized by a culture of open source stewardship. Although our team is small, our contributions to the Cocoa developer community are significant. We hope our article sheds some light on our development and testing practices while also providing a high-level look into our team‚Äôs philosophy. If you‚Äôd like to learn more, feel free to reach out to us at <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#109;&#x6f;&#98;&#105;&#x6c;&#x65;&#64;&#97;&#x72;&#x74;&#115;&#121;&#x2e;&#110;&#101;&#116;">&#x6d;&#111;&#98;&#105;&#x6c;&#x65;&#x40;&#x61;&#x72;&#x74;&#x73;&#121;&#x2e;&#x6e;&#x65;&#x74;</a> or <a href="https://twitter.com/artsyopensource">@ArtsyOpenSource</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods-Keys and CI]]></title>
    <link href="http://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI/"/>
    <updated>2015-01-21T16:43:00-05:00</updated>
    <id>http://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI</id>
    <content type="html"><![CDATA[<p>We built CocoaPods-Keys as a way to remove API keys and secrets from our source code. We use it to open up our code to the pubic, without leaking private details. One of the cool things about doing it this way was that we could all use different API keys stashed away in each developers Keychain.</p>

<p>To ensure we could run CI on our apps we came up with two different ways to use keys on CI. This post explains them both.</p>

<!-- more -->


<h2>The easy way.</h2>

<p>Depending on your use-case, you may not need to use the keys at all in your testing. This works really well if you're using stubbed network requests. So if you have a keys definition in your <a href="https://github.com/artsy/eidolon/blob/9a918108e717a68a45709345f38d55e0eeb1f8b3/Podfile#L4-L21">Podfile</a> like this:</p>

<p><code>ruby
plugin 'cocoapods-keys', {
  :project =&gt; "Eidolon",
  :target =&gt; "Kiosk",
  :keys =&gt; [
    "ArtsyAPIClientSecret",
    "ArtsyAPIClientKey",
  ]
}
</code></p>

<p>Before the CI runs <code>pod install</code> you will want ensure you have already set the keys to be dummy data. So in either your <code>install:</code> or <code>before_install:</code> add commands like the following:</p>

<pre><code>    bundle exec pod keys set ArtsyAPIClientSecret "-" Eidolon
    bundle exec pod keys set ArtsyAPIClientKey "-"
</code></pre>

<p>This will set up the keys beforehand with the right target name.</p>

<h2>The fully featured way</h2>

<p>If you need to have full access to an API with secret keys, we recommend using the CI's private environment keys feature. You can see the technique being used here in Eidolon, starting on <a href="https://github.com/artsy/eidolon/blob/master/.travis.yml#L5">line 5</a> we declare a secure environment key <code>GITHUB_API_KEY</code> in that hash. Then it is used on <a href="https://github.com/artsy/eidolon/blob/aa8e8447f797c483ff72148d124d2930b58a42e7/.travis.yml#L8">line 8</a> to set up our <code>~/.netrc</code>.</p>

<p>To get started on Travis CI you will need to install the travis gem, and go through the <a href="http://docs.travis-ci.com/user/environment-variables/">Environment Variables</a> section of their documentation. Notably the <a href="http://docs.travis-ci.com/user/environment-variables/#Secure-Variables">Secure Variables</a> section. In a gist, you run <code>travis encrypt ARTSYAPICLIENTSECRET=super_secret_yo</code> and it gives you the secure string.</p>

<p>You can then use the new keys in your <code>before:</code> section:</p>

<pre><code>    bundle exec pod keys set ArtsyAPIClientSecret $ARTSYAPICLIENTSECRET Eidolon
    bundle exec pod keys set ArtsyAPIClientKey $ARTSYAPICLIENTKEY
</code></pre>

<p>That's a wrap. We don't use the second technique in any OSS repos, though there is talk of doing it on our <a href="https://github.com/artsy/Artsy_Authentication/">Artsy Authentication</a> pod. So if you're in my future üëã, maybe give that a look over as an example of the latter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods and Frameworks]]></title>
    <link href="http://artsy.github.io/blog/2015/01/04/cocoapods-and-frameworks/"/>
    <updated>2015-01-04T16:43:00-05:00</updated>
    <id>http://artsy.github.io/blog/2015/01/04/cocoapods-and-frameworks</id>
    <content type="html"><![CDATA[<p>As I mentioned in my <a href="https://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">retrospective on Eidolon</a>, Artsy iOS codebases are often used as testbeds for new CocoaPods features. With Eidolon, we had the opportunity to try out CocoaPods' support for frameworks and Swift. This post is a look back at the month of using dependencies as dynamic frameworks instead of static libraries.</p>

<!-- more -->


<p>Updating was pretty easy: we used a <code>Gemfile</code> and <code>bundler</code> to specify a pre-release version of CocoaPods, as well as pre-release versions of its dependencies. (Updating now is easy ‚Äì just run <code>[sudo] gem install cocoapods --prerelease</code> to grab the latest beta.)</p>

<p>After updating to CocoaPods, all of our existing code had to be migrated. Previously, we could import all the frameworks we used in the bridging header and they would be accessible to all of our Swift files. <a href="https://github.com/orta/eidolon/commit/abc359c55d4322d21d88349fbd044bf5b5f04725">This commit</a> is an example of having to add <code>import Moya</code> statements all throughout our Swift files that needed to access that library.</p>

<p>One by one, we created podspecs for libraries we were using. Then we would push the podspecs to a fork of that library. By specifying in our Podfile which repository CocoaPods should fetch the code from, we were able to use our own podspecs without bothering the library authors themselves. Some libraries did <a href="https://github.com/Quick/Quick/pull/197">accepted pull requests</a> to add the podspecs from us.</p>

<p>The final step to update was getting our tests to pass. Up to this point, we had added all of our classes to both the app target <em>and</em> the test target. The helpful upshot of this is that all of the test were able to access the Swift classes without us having had declared those classes <code>public</code>. Swift classes are <code>internal</code> by default, so separating out the app code from the test target required <a href="https://github.com/orta/eidolon/pull/4">quite a few</a> tedious changes throughout our codebase.</p>

<p><img src="/images/2015-01-04-cocoapods-and-frameworks/levelup.gif" alt="Level up." /></p>

<p>Eidolon is pretty distinct among iOS applications: from day one, it was developed completely in the open. Developing this kind of app in the open posed some new challenges, including limiting access to fonts for which we have licenses to use but not to distribute. Orta <a href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/">solved this problem</a> earlier this year by having two pods: one private, and one public, but with identical header files. When installing the dependencies, CocoaPods uses one pod or the other depending on a <a href="https://github.com/artsy/eidolon/blob/4ae52f166f2d1620f25a59f36e6a87915ba32705/Podfile#L31-L35">complex heuristic</a>. However, the names of the pods are used as names for the Swift modules generated from them. Since the pods have different names, the <code>import Artsy_UIFonts</code> statements won't make sense if someone only has access to the <code>Artsy_OSSUIFonts</code> module. Swift's lack of a preprocessor led to some <a href="https://github.com/artsy/eidolon/commit/57aa66681727cfed11239f9b5a62bb59fee35f1a">hacks</a>. However, CocoaPods now allows you to specify a module name for a pod, so we'll be fixing the issue <a href="https://github.com/artsy/Artsy-OSSUIFonts/issues/1">shortly</a>.</p>

<p>Of course, Swift still has some rough edges, too. Namely, we can't compile our app with compiler optimizations enabled ‚Äì the compiler will segfault. It turns out that one of our dependencies was causing the segfault ‚Äì probably just a Swift compiler bug, but we needed a workaround until it's fixed. I got more familiar with post-install hooks when I dipped my toes into Ruby to <a href="https://github.com/ashfurrow/cocoapods-chillax-swift">disable the optimization on specific pods</a>.</p>

<p>Orta used the opportunity of using a prerelease version of CocoaPods to help define the new <code>plugin</code> syntax in the <a href="https://github.com/artsy/eidolon/commit/cdc8dde011e98878a7dde646d0da75c34c8fd5a9#diff-4a25b996826623c4a3a4910f47f10c30">Podfile</a>.</p>

<p>One issue that Marius covered in the <a href="http://blog.cocoapods.org/Pod-Authors-Guide-to-CocoaPods-Frameworks/">CocoaPods blog post</a> is that of bundles. Since a framework is a separate bundle from the app (as opposed to a static library, which is in the same bundle), code that relies on <code>[NSBundle mainBundle]</code> isn't going to behave correctly in a framework. An unexpected problem we encountered related to bundles was our use of custom fonts. For Eidolon, our fonts reside in a CocoaPod and, therefore, now in a framework. That means that the font files aren't in our app's bundle anymore and <code>UIFont</code>'s <code>fontWithName:</code> wasn't finding those font files, regardless our use of the <code>UIAppFonts</code> key in any info.plist file. Borrowing a <a href="https://github.com/CocoaPods-Fonts/OpenSans/blob/874e65bc21abe54284e195484d2259b2fe858680/UIFont%2BOpenSans.m#L18-L38">solution from OpenSans</a>, we were able to use CoreText to load the font manually.</p>

<p>Finally, we were done.</p>

<p><img src="/images/2015-01-04-cocoapods-and-frameworks/success.gif" alt="Finally finished." /></p>

<p>Adopting CocoaPods with support for frameworks early helped us identify features and bug fixes that we could ask the CocoaPods developers for. Now, there is still time to let the team know what awesome feature you'd like to see included, but you'll have to try the fancy new CocoaPods version in order to figure out what that feature is. Sure, CocoaPods 0.36 is still in beta, but since you're already using a pre-1.0 dependency mananger, you're probably cool with trying out awesome, cutting-edge stuff. Try the new release when you get a chance and <a href="https://github.com/CocoaPods/CocoaPods/issues/new">let the team know</a> if you have feedback.</p>

<p>Our path to using CocoaPods with frameworks was bumpy, but we were the first ones to try. Today, the process is a lot easier.</p>

<p>The CocoaPods team has a <a href="http://blog.cocoapods.org/Pod-Authors-Guide-to-CocoaPods-Frameworks/">wonderful guide</a> for library authors to adopt the new CocoaPods version, so we'll likely see lots of new pods from open source Swift code, just like we already have with Objective-C.</p>

<p>A sincere thanks to <a href="http://twitter.com/mrackwitz">Marius</a> and everyone on the CocoaPods team for their dedicated work on the support for frameworks in CocoaPods.</p>

<p><img src="/images/2015-01-04-cocoapods-and-frameworks/highfive.gif" alt="Great work, team." /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Close to the Metal: Debugging Our Hardware Problem]]></title>
    <link href="http://artsy.github.io/blog/2014/11/18/debugging-our-hardware-problem/"/>
    <updated>2014-11-18T08:33:00-05:00</updated>
    <id>http://artsy.github.io/blog/2014/11/18/debugging-our-hardware-problem</id>
    <content type="html"><![CDATA[<p>For the past few months, Artsy‚Äôs mobile team has been working on <a href="https://github.com/artsy/eidolon">Eidolon</a>, a bidding kiosk for Artsy‚Äôs auctions platform. While we‚Äôve written a <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">retrospective</a> on the process of making Eidolon from the software side of things, we didn‚Äôt really touch on how our software is being used.</p>

<!-- more -->


<p>For typical iOS applications, you create an archive with Xcode and send it to users via the Internet. Maybe it‚Äôs an App Store release that goes to Apple before being downloaded by your users. Maybe it‚Äôs a beta release that goes to <a href="http://hockeyapp.net/">Hockey</a> before being downloaded by your users. Maybe it‚Äôs an enterprise build that goes to your own servers before being downloaded by your users. In any case, there is one thing in common: your users download the software themselves and run it on their own devices.</p>

<p>Eidolon is different. We develop the software and package it using enterprise distribution and use Hockey to download it to our own iPads. These iPads are managed by the Artsy auctions team at events; they are housed in these nifty little stands which hold the iPad in place and also allow room for the credit card readers.</p>

<p><img src="/images/2014-11-18-debugging-our-hardware-problem/first_auction.jpg" alt="Eidolon at our first auction" /></p>

<p>At our first auction, everything went great ‚Äì no major glitches or crashes. Awesome!</p>

<p>A few weeks later, on the morning of our second auction, things were no so great. We were having issues with our credit card processor, <a href="https://getcardflight.com">CardFlight</a> and spent a lot of time on the phone with them sorting out the problem. As a precaution, <a href="http://twitter.com/orta">Orta</a> pulled of an extraordinary feat of engineering to produce a manual card entry interface in a matter of hours. The card processing was working, but it would‚Äôve been better to be safe than sorry.</p>

<p>That evening, the auctions team was preparing, and they discovered a problem: <em>some</em> of the Kiosks were experiencing a new problem processing cards. That was strange because earlier that day, the first issue was affecting <em>all</em> kiosks. Because we had had problems earlier that day with CardFlight, we assumed that this new problem was also on their end. We didn‚Äôt have time to debug the problem, but the event itself went fine because we had that manual entry interface. However, we definitely needed to find the cause of the problem later.</p>

<p>Orta tried over the next several days to diagnose the issue, but he couldn‚Äôt reproduce it at all. Different code, different build settings, different distribution methods ‚Äì nothing could reproduce the problem.</p>

<p><img src="/images/2014-11-18-debugging-our-hardware-problem/desk.jpg" alt="Debugging the issue" /></p>

<p>Eventually, we decided that the issue must have resolved itself somehow and hopefully wouldn‚Äôt pop up again. We simply didn‚Äôt have time to keep trying to reproduce a phantom bug.</p>

<p>Fast forward to last night at the <a href="https://artsy.net/feature/ici-benefit-auction-2014">third auction</a> facilitated with Eidolon. We get there, and some of the kiosks are exhibiting the same behaviour, even though our tests earlier in the day didn‚Äôt show the problem. We tried over and over again: disassembling a problematic kiosk, discovering it worked outside the housing, then reassembling it to see it no longer working. What could the problem be?</p>

<p>Well, let‚Äôs take a look at the kiosks we used last night.</p>

<p><img src="/images/2014-11-18-debugging-our-hardware-problem/housing.jpg" alt="Kiosk housing" /></p>

<p>Notice anything different from our first auction kiosk?</p>

<p>In between the first and second auctions, the white faceplates we had ordered arrived. The auctions team put them on the Kiosks for the second auction, which is when the problem first presented. When Orta tried to reproduce the problem, the iPads he used weren‚Äôt in the housings ‚Äì they were just on his desk.</p>

<p>It turned out that faceplate had some foam to provide resistance against the housing to prevent them from slipping apart. Take a look and see.</p>

<p><img src="/images/2014-11-18-debugging-our-hardware-problem/disassembled.jpg" alt="Kiosk disassembled" /></p>

<p>When the faceplate was slid onto the housing, the foam was catching on the rubber padding of the card reader (which plugs into the headphone jack of the iPad). Sliding the faceplate onto the housing was sometimes pushing the card reader a few millimetres out of the headphone jack, causing our problem.</p>

<p><img src="/images/2014-11-18-debugging-our-hardware-problem/catching.jpg" alt="The problem" /></p>

<p>The solution was simple: tear off the rubber padding from the card reader and cut off some foam from the faceplate.</p>

<p><img src="/images/2014-11-18-debugging-our-hardware-problem/solution.jpg" alt="Our solution" /></p>

<p>After that, the faceplate would slide on without issue and all of the kiosks worked fine. It took some time to disassemble all of the kiosks, but we got it working in time for the auction. Eidolon‚Äôs third performance was a success.</p>

<p>As I said earlier, Eidolon is different from typical iOS applications ‚Äì our experience writing typical apps left us ill-equipped to debug what turned out to be a hardware problem. We learnt that, when reproducing bugs that only happen in production, it‚Äôs crucial to reproduce the <em>physical</em> context that the bug is occurring in as closely as possible. We also learnt that jumping to the conclusion that CardFlight was responsible for our issues was, while a natural gut reaction, deserved closer scrutiny when later trying to reproduce the problem.</p>

<p>Our auctions team was happy that we solved the phantom card-swiping problem and our users were none-the-wiser to the hurried use of Allen keys backstage to disassemble and reassmble kiosks. Eidolon, the software that we had poured so much time into, was almost defeated by a errant piece of foam. But we prevailed.</p>

<div style="text-align:center;">
<a href= "http://www.thebos.co/p/XUJNAY"><img src = "http://artsy.github.io/images/2014-11-18-debugging-our-hardware-problem/success.gif"></a>
</div>

]]></content>
  </entry>
  
</feed>
